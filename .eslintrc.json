{
  "root": true,
  "env": {
    "browser": true,
    "node": true,
    "es2021": true
  },
  "ignorePatterns": ["node_modules", "dist", "build", "coverage", "scripts"],
  "parser": "@typescript-eslint/parser",
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:react-hooks/recommended",
    "plugin:react/jsx-runtime",
    // "plugin:unicorn/recommended",
    "eslint-config-code-complexity",
    "prettier"
  ],
  "rules": {
    "no-dupe-else-if": "error",
    "no-promise-executor-return": "error",
    "no-unreachable-loop": "error",
    "no-useless-backreference": "error",
    "require-atomic-updates": "error",
    "default-case-last": "error",
    "grouped-accessor-pairs": "error",
    "no-constructor-return": "error",
    "no-implicit-coercion": "error",
    "prefer-regex-literals": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],

    "import/no-unresolved": "off",
    "import/order": [
      "warn",
      {
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "pathGroups": [
          {
            "pattern": "react",
            "group": "builtin",
            "position": "before"
          },
          {
            "pattern": "@",
            "group": "external"
          },
          {
            "pattern": "shared",
            "group": "internal"
          },
          {
            "pattern": "../../**/*.scss",
            "group": "index",
            "position": "after"
          },
          {
            "pattern": "../**/*.scss",
            "group": "index",
            "position": "after"
          },
          {
            "pattern": "**/*.scss",
            "group": "index",
            "position": "after"
          }
        ],
        "newlines-between": "never",
        "pathGroupsExcludedImportTypes": ["react"]
      }
    ],

    "no-void": "off",
    "@typescript-eslint/padding-line-between-statements": "off",
    "@typescript-eslint/prefer-enum-initializers": "off",
    "@typescript-eslint/prefer-readonly-parameter-types": "off",
    "@typescript-eslint/prefer-regexp-exec": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/init-declarations": "off",
    "@typescript-eslint/no-confusing-void-expression": [
      "error",
      { "ignoreArrowShorthand": true }
    ],
    "@typescript-eslint/non-nullable-type-assertion-style": "off",
    "@typescript-eslint/strict-boolean-expressions": "off",
    "@typescript-eslint/no-implicit-any-catch": "off",
    "@typescript-eslint/member-ordering": "off",
    "@typescript-eslint/prefer-includes": "off",
    "@typescript-eslint/no-restricted-imports": "off",
    "@typescript-eslint/no-unused-vars": ["warn"],
    "import/no-extraneous-dependencies": ["off"],
    "react/no-did-update-set-state": "off",
    "react/no-find-dom-node": "off",
    "react/no-is-mounted": "off",
    "react/no-redundant-should-component-update": "off",
    "react/no-render-return-value": "off",
    "react/no-string-refs": "off",
    "react/no-this-in-sfc": "off",
    "react/no-will-update-set-state": "off",
    "react/prefer-es6-class": "off",
    "react/no-unused-state": "off",
    "react/prefer-stateless-function": "off",
    "react/require-render-return": "off",
    "react/sort-comp": "off",
    "react/state-in-constructor": "off",
    "react/static-property-placement": "off",
    "react/prop-types": "off",
    "react/require-default-props": "off",
    "react/boolean-prop-naming": [
      "warn",
      {
        "validateNested": true
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function"
      }
    ],
    "react/no-unstable-nested-components": "error",
    "react/jsx-key": "error",
    "react/jsx-no-bind": [
      "error",
      {
        "ignoreRefs": false,
        "allowArrowFunctions": true,
        "allowFunctions": true,
        "allowBind": false,
        "ignoreDOMComponents": false
      }
    ],
    "react/jsx-no-constructed-context-values": "error",
    "react/jsx-no-script-url": "error",
    "react/jsx-no-useless-fragment": "off",
    "react/display-name": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": [
      "warn",
      {
        "additionalHooks": "(useRecoilCallback|useRecoilTransaction_UNSTABLE)"
      }
    ],
    "unicorn/prevent-abbreviations": "off",
    "one-var": "off",
    "@typescript-eslint/naming-convention": "off",
    "unicorn/no-abusive-eslint-disable": "off",
    "unicorn/filename-case": "off",
    "unicorn/no-null": "off",
    "no-console": ["error", { "allow": ["info", "warn", "error"] }],
    "no-warning-comments": [
      "error",
      {
        "terms": ["fixme"],
        "location": "start"
      }
    ],
    "react/jsx-handler-names": [
      "error",
      {
        "eventHandlerPrefix": "handle",
        "eventHandlerPropPrefix": "on",
        "checkLocalVariables": false,
        "checkInlineFunction": false
      }
    ],
    "max-statements": ["error", 9],
    "max-statements-per-line": ["error", { "max": 2 }],
    "complexity": ["error", 9],
    "max-params": ["error", 5],
    "max-nested-callbacks": ["error", 3]
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "overrides": [
    {
      "files": ["src/**/contract.ts", "src/**/abi.ts"],
      "parserOptions": {
        "project": ["./tsconfig.json"]
      },
      "rules": {
        "max-lines": "off"
      }
    },
    {
      "files": ["src/**/*.ts?(x)"],
      "parserOptions": {
        "project": ["./tsconfig.json"]
      }
    },
    {
      "files": ["vite.config.ts", "cypress.config.ts"],
      "parserOptions": {
        "project": ["./tsconfig.node.json"]
      },
      "rules": {
        "@typescript-eslint/no-magic-numbers": "off"
      }
    }
  ]
}
